
DOM：文档对象模型(document Object Model)：是HTML和XML文档的编程接口,以树形结构表达HTML文档或XML文档
	当网页被加载时，浏览器会创建页面的文档对象模型

XML DOM：定义了所有XML元素的对象和属性，以及访问他们的方法

HTML DOM：定义了所有HTM元素的对象和方法，以及访问和操作 HTML文档的方法
	 	换言之HTML DOM 是关于如何获取、修改、添加或删除 HTML 元素的标准
			

1：HTML DOM 节点
	根据W3c标准,HTML 文档中的所有内容都是节点
		1:整个文档是一个文档节点（document）
    		2:每个 HTML 元素是元素节点
    		3:HTML 元素内的文本是文本节点
    		4:每个 HTML 属性是属性节点
    		5:注释是注释节点
 
 HTML DOM 将 HTML 文档视作树结构,这种结构被称为节点树,节点树中的节点彼此拥有层级关系,用父（parent）、子（child）
 和同胞（sibling）等术语来描述这些关系


2：HTML DOM 方法：是我们可以在节点（HTML 元素）上执行的动作
   HTML DOM 属性：是我们可以在节点（HTML 元素）设置和修改的值

     可通过JavaScript(以及其他编程语言)对HTML DOM进行访问,修改所有 HTML 元素被定义为对象,而编程接口则是对象方法和对象属性
	方法是您能够执行的动作（比如添加或修改元素）。
	属性是您能够获取或设置的值（比如节点的名称或内容）


	getElementById(id) 	 	返回带有指定 ID 的元素
	appendChild(node) 	 	把新的子节点添加到指定节点
	removeChild(child) 	 	删除子节点
	replaceChild(para,child) 	替换子节点
	insertBefore(para,child) 	在指定的子节点前面插入新的子节点。
	createElement("元素名称") 	创建元素节点。
	createTextNode("文本内容") 	创建文本节点。
	createAttribute() 		创建属性节点。
	
	getAttribute() 		 返回指定的属性值
	setAttribute() 		 把指定属性设置或修改为指定的值

	getElementsByTagName() 		返回包含带有指定标签名称的所有元素的节点列表（集合/节点数组）
	getElementsByClassName() 	返回包含带有指定类名的所有元素的节点列表
	


3：HTML DOM 属性
	属性是节点（HTML 元素)的值，可以获取或设置

	1：innerHTML 属性对于获取HTML 元素的内容
	2：nodeName 属性规定节点的名
		元素节点的 nodeName 与标签名相同
		属性节点的 nodeName 与属性名相同
		文本节点的 nodeName 始终是 #text
		文档节点的 nodeName 始终是 #document
	
	3：nodeValue 属性规定节点的值
		元素节点的 nodeValue 是 undefined 或 null
	4：nodeType 属性返回节点的类型
		元素 	1
		属性 	2
		文本 	3
		注释 	8
		文档 	9


4：HTML DOM 访问
	通过id .class名，标签名访问标签
	getElementById(id) 		返回带有指定 ID 的元素
	getElementsByTagName() 		返回包含带有指定标签名称的所有元素的节点列表（集合）
	getElementsByClassName() 	返回包含带有指定类名的所有元素的节点列表
			

5：HTML DOM 修改
	修改 HTML = 改变元素、内容、属性(Attruibute)、样式(CSS)和事件

   1：修改内容
	document.getElementById("p1").innerHTML="新文本!";
   2：修改属性
	document.getElementById(id).属性名=新属性值;
   3：改变 HTML样式(CSS)
	document.getElementById("p2").style.color="blue";
   4：创建新的 HTML 元素
	var para=document.createElement("p");
	var node=document.createTextNode("这是一个新段落。");
	para.appendChild(node);


6：HTML DOM 事件
	HTML DOM 允许 JavaScript 对 HTML 事件作出反应
	
  事件对象代表事件的状态，事件通常与函数结合使用，函数不会在事件发生前被执行！	

  1：加载事件
	onload 		事件会在用户进入或离开页面时被触发，属性在body哪儿
	onunload	用户退出界面时
			
  2：onchange 事件：常用于输入字段的验证，当用户一旦改变域的内容，就会调用函数

  3：nmouseover 和 onmouseout 事件：用于在鼠标指针悬浮上或离开元素时触发函数。

  4：nmousedown、onmouseup 以及 onclick 事件

  5：onmousedown、onmouseup 以及 onclick 事件是鼠标点击的全部过程
    	首先当某个鼠标按钮被点击时，触发 onmousedown 事件，然后，当鼠标按钮被松开时，会触发 onmouseup 事件，
	当鼠标点击完成时，触发 onclick 事件（可单独作为一个事件）


7：事件监听器
 element.addEventListener(event, function, useCapture);
	event参数:是事件的类型 (如 "click" 或 "mousedown").
	function参数:是事件触发后调用的函数。
	useCapture参数:是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。

  作用：可以向元素添加多个事件

	事件传递定义了元素事件触发的顺序,有两种方式：冒泡与捕获
	在 冒泡 中，内部元素的事件会先被触发，然后再触发外部元素
	在 捕获 中，外部元素的事件会先被触发，然后才会触发内部元素的事件
  
  默认值为 false, 即冒泡传递，当值为 true 时, 事件使用捕获传递

 element.removeEventListener("mousemove", myFunction);
			



		
		
		